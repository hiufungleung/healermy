name: Build & Deploy (amd64)

on:
  workflow_dispatch:

env:
  IMAGE_NAME: hiufungleung/healermy
  IMAGE_TAG: latest

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.digest }} # image digest（單架構也會有）
      image_ref: ${{ steps.meta.outputs.image_ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Compose image ref
        id: meta
        run: echo "image_ref=${IMAGE_NAME}:${IMAGE_TAG}" >> "$GITHUB_OUTPUT"

      - name: Build & Push to Docker Hub
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -euo pipefail

            CONTAINER=healermy
            PORT=3000

            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            RAW_DIGEST="${{ needs.build.outputs.digest }}"
            DIGEST="$(printf '%s' "$RAW_DIGEST" | tr -d '\r\n')"

            if [ -n "$DIGEST" ]; then
              IMAGE_REF="${IMAGE_NAME}@${DIGEST}"
            else
              IMAGE_REF="${IMAGE_NAME}:${{ github.sha }}"
            fi
            echo "Using image: $IMAGE_REF"

            # Login on EC2 (needed if repo is private)
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ vars.DOCKER_USERNAME }}" --password-stdin

            # Ensure the app network exists (shared with Nginx)
            docker network inspect web >/dev/null 2>&1 || docker network create web

            # Replace old container
            docker rm -f "$CONTAINER" 2>/dev/null || true
            docker pull "$IMAGE_REF"

            docker run -d --name "$CONTAINER" \
              --network web \
              -e HOSTNAME=0.0.0.0 \
              -e PORT=$PORT \
              -e NEXT_PUBLIC_BASE_URL="${{ vars.NEXT_PUBLIC_BASE_URL }}" \
              -e NEXT_PUBLIC_FHIR_SERVER_URL="${{ vars.NEXT_PUBLIC_FHIR_SERVER_URL }}" \
              -e CLIENT_ID="${{ vars.CLIENT_ID }}" \
              -e CLIENT_SECRET="${{ secrets.CLIENT_SECRET }}" \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              -e SESSION_EXPIRY="${{ vars.SESSION_EXPIRY }}" \
              -e PATIENT_SCOPE_OFFLINE="${{ vars.PATIENT_SCOPE_OFFLINE }}" \
              -e PATIENT_SCOPE_ONLINE="${{ vars.PATIENT_SCOPE_ONLINE }}" \
              -e PROVIDER_SCOPE_OFFLINE="${{ vars.PROVIDER_SCOPE_OFFLINE }}" \
              -e PROVIDER_SCOPE_ONLINE="${{ vars.PROVIDER_SCOPE_ONLINE }}" \
              -e ACCESS_TYPE="${{ vars.ACCESS_TYPE }}" \
              --restart unless-stopped \
              "$IMAGE_REF"

            # Health check: wait for app to be ready
            for i in {1..30}; do
              if docker run --rm --network web curlimages/curl:8.8.0 \
                   -fsS "http://$CONTAINER:$PORT/api/health-check" >/dev/null; then
                echo "UP"; break
              fi
              sleep 2
            done

            # Delete old images to save space
            docker image prune -f
